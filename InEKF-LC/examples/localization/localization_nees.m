function [nees] = localization_nees(errs, Ps, hat_Rots, hat_ps, name)
% LOCALIZATION_NEES  计算归一化估计误差平方（NEES）以评估滤波器一致性
%
% 语法:
%   nees = localization_nees(errs, Ps, hat_Rots, hat_ps, name)
%
% 描述:
%   本函数计算机器人定位中方向和位置的 NEES 指标，用于评估滤波器估计的协方差
%   是否与实际误差匹配（即“一致性”）。理想情况下，NEES 应接近其理论期望值。
%
%   NEES 是状态估计中最重要的性能指标之一：
%     - 若 NEES 显著大于自由度：滤波器过于乐观（协方差低估）
%     - 若 NEES 显著小于自由度：滤波器过于保守（协方差高估）
%
%   本实现支持三种误差协方差解释方式，对应不同滤波器设计：
%     - "STD":  标准欧氏误差（适用于 EKF）
%     - "LEFT": 左不变误差（适用于 InEKF）
%     - 其他:   右不变误差或特殊结构（实验性）
%
% 输入参数:
%   errs       - 误差矩阵（3×N），由 localization_errors 生成：
%                errs(1,:) : 方向误差（弧度）
%                errs(2:3,:): 位置误差 [dx; dy]
%   Ps         - 协方差矩阵序列（N×3×3），每层对应一个时刻的 P_k
%   hat_Rots   - 估计的旋转矩阵序列（元胞数组，1×N），用于坐标变换
%   hat_ps     - 估计的位置序列（N×2 矩阵），每行 [x_hat, y_hat]
%   name       - 滤波器类型字符串，决定如何解释协方差：
%                "STD"  : 标准 EKF（欧氏误差）
%                "LEFT" : InEKF（左不变误差）
%                其他   : 使用基于位置梯度的变换（实验模式）
%
% 输出参数:
%   nees       - NEES 结果（2×N 矩阵）：
%                nees(1,:) : 方向 NEES（自由度 = 1）
%                nees(2,:) : 位置 NEES（自由度 = 2，已归一化）
%
% 注意：
%   从第 2000 个时间步开始计算，以避免初始瞬态响应影响评估结果

%% 初始化
N = length(errs);                    % 总时间步数
nees = zeros(2, N);                 % 预分配内存：[方向NEES; 位置NEES]

% 定义常量矩阵
J0 = [[0, -1]; [1, 0]];             % SO(2) 生成子（等价于 J = [0 -1; 1 0]）
J = eye(3);                         % 3×3 单位矩阵，用于构建变换雅可比

%% 主循环：从第 2000 步开始计算 NEES（跳过初始过渡期）
for n = 2000:N
    
    % 获取当前时刻的原始协方差矩阵（3×3）
    P_raw = squeeze(Ps(n, :, :));   % 去除单例维度
    
    % 根据滤波器类型选择正确的协方差解释方式
    if name == "STD"
        % ------------------ 情况1：标准 EKF（欧氏误差）------------------
        % 假设误差定义为：
        %   δθ = θ_hat - θ_true
        %   δp = p_hat - p_true
        % 协方差 P 可直接使用
        P = P_raw;
        
    elseif name == "LEFT"
        % ------------------ 情况2：InEKF（左不变误差）------------------
        % 左不变误差定义在机体坐标系中：
        %   ξ = log(X⁻¹ X_hat) ≈ [δθ; δx_body; δy_body]
        % 因此需将协方差从机体坐标系转换到世界坐标系：
        %   P_world = J * P_body * J'
        % 其中 J = [1   0    0;
        %           0  R_22  R_23;
        %           0  R_32  R_33]  （R 即 hat_Rots{n}）
        J(2:3, 2:3) = hat_Rots{n};   % 用当前估计方向进行坐标变换
        P = J * P_raw * J';
        
    else
        % ------------------ 情况3：基于位置梯度的变换（实验性）------------------
        % 可能用于右不变或其他非标准误差模型
        % J(2:3,1) = J0 * (hat_ps(n,:)') 表示位置对方向的敏感度
        % 即：∂p/∂θ = J0 * p = [-y; x] （绕原点旋转的切向速度）
        J(2:3, 1) = J0 * (hat_ps(n, :)');  % 构造方向对位置的影响项
        P = J * P_raw * J';
    end
    
    %% 计算方向 NEES（自由度 = 1）
    % NEES_θ = δθ² / P_θθ
    nees(1, n) = errs(1, n)^2 / P(1, 1);
    
    %% 计算位置 NEES（自由度 = 2，已归一化）
    % NEES_p = (δp)' * inv(P_pp) * (δp) / 2
    % 除以 2 是为了得到“每自由度”的平均值，便于比较
    delta_p = errs(2:3, n);                    % 2×1 位置误差向量
    P_pos = P(2:3, 2:3);                       % 2×2 位置协方差子块
    nees(2, n) = (delta_p' * inv(P_pos) * delta_p) / 2;
    
end

% 函数结束
end