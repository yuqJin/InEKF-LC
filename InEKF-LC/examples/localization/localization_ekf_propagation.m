function [new_state, new_P] = localization_ekf_propagation(state, ...
    P, omega, dt, Q)
% LOCALIZATION_EKF_PROPAGATION  扩展卡尔曼滤波器（EKF）的状态预测步骤
%
% 语法:
%   [new_state, new_P] = localization_ekf_propagation(state, P, omega, dt, Q)
%
% 输入参数:
%   state   - 当前时刻的状态（结构体），包含：
%             .Rot: 2x2 旋转矩阵（方向，属于 SO(2)）
%             .p:   2x1 位置向量 [x; y]
%   P       - 当前协方差矩阵（3x3），表示状态估计的不确定性
%   omega   - 控制输入（结构体），包含：
%             .v:   前向线速度（m/s）
%             .gyro: 角速度（rad/s）
%   dt      - 时间步长（秒），用于数值积分
%   Q       - 过程噪声协方差矩阵（3x3），对应状态噪声（v, v_lat, gyro）
%
% 输出参数:
%   new_state - 预测后的状态（结构体，同输入格式）
%   new_P     - 预测后的协方差矩阵（3x3）
%
% 功能说明：
%   本函数实现 EKF 的预测阶段，分为两步：
%     1. 状态均值传播：通过非线性运动模型 f 更新状态
%     2. 协方差传播：通过雅可比矩阵 F 和噪声映射矩阵 G 传播不确定性
%
% 注意：
%   该实现基于标准 EKF 框架，将方向用旋转矩阵表示，并在欧氏空间中线性化。
%   虽然简单，但在大误差下可能不稳定（相比之下 InEKF 或 UKF 更鲁棒）

%% 第一步：状态均值的非线性传播
% 调用运动模型函数 f 进行状态更新：
%   new_state = f(state, omega, w=0, dt)
% 其中 w=0 表示使用无噪声的名义输入（真实扰动为零）
% 实际上，f 函数应实现如下动力学：
%
%   R_{k+1} = R_k * exp(-omega.gyro * dt)        % 方向更新（绕原点旋转）
%   p_{k+1} = p_k + R_k * [v*dt; 0]              % 位置前向积分（v 是前进速度）
%
% 注意：横向滑移项在 f 中可能被忽略或建模为过程噪声
new_state = localization_f(state, omega, zeros(3, 1), dt);

%% 第二步：协方差矩阵的线性化传播
% 构建状态转移雅可比矩阵 F ≈ ∂f/∂x（在当前状态处线性化）
F = eye(3);  % 初始化为 3×3 单位阵

% 构造一个用于方向影响位置的旋转生成子矩阵 J
% J = [0 -1; 1 0] 是 SO(2) 的李代数基底（对应 dR/dθ ≈ R*J）
J = [0 -1;
     1  0];

% 计算状态转移矩阵中 (2:3, 1) 子块：
% 表示“方向的变化如何影响位置更新”
% 即：∂p/∂θ = R * J * v * dt
% 这是因为当航向角 θ 变化时，当前速度方向也会变，从而改变下一时刻的位置
F(2:3, 1) = state.Rot * J * omega.v * dt;

% 构建噪声输入映射矩阵 G（将过程噪声从输入空间映射到状态空间）
% G 的尺寸是 3×3，对应状态维度（方向角、x、y）
G = dt * eye(3);  % 初始设为对角阵

% 修改前两行（位置部分）：
% 过程噪声中的纵向速度噪声和横向速度噪声通过当前姿态 R 被旋转到世界坐标系
% 即：dp = R * [dv; dv_lat] * dt
G(1:2, 1:2) = dt * state.Rot;  % 只有前两个噪声分量（v 和 v_lat）影响位置

% 使用离散时间 EKF 协方差传播公式：
%   P_{k+1|k} = F * P_k * F' + G * Q * G'
% 其中：
%   - F 是状态转移雅可比（状态误差传播）
%   - G*Q*G' 是过程噪声在状态空间中的扩散
new_P = F * P * F' + G * Q * G';

% 函数结束
end