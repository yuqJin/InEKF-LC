function [new_state] = localization_f(state, omega, w, dt)
% LOCALIZATION_F  非线性运动模型：2D 机器人的状态传播函数
%
% 语法:
%   new_state = localization_f(state, omega, w, dt)
%
% 输入参数:
%   state   - 当前状态（结构体），包含：
%             .Rot: 2x2 旋转矩阵（方向，属于 SO(2)，表示当前朝向）
%             .p:   2x1 位置向量 [x; y]
%   omega   - 控制输入（结构体），包含：
%             .v:     前向线速度（m/s）
%             .gyro:  角速度（rad/s，来自陀螺仪）
%   w       - 输入噪声（3×1 向量），模拟传感器不确定性：
%             w(1):   纵向速度噪声
%             w(2):   横向滑移速度噪声
%             w(3):   角速度噪声
%   dt      - 时间步长（秒），用于数值积分
%
% 输出参数:
%   new_state - 预测后的状态（结构体，格式同输入 state）
%
% 功能说明：
%   该函数实现了一个典型的**非完整2D机器人运动学模型**（自行车模型近似）：
%     - 机器人通过前向速度 v 和角速度 gyro 进行移动
%     - 所有输入都叠加了过程噪声 w
%     - 使用一阶欧拉积分进行状态更新
%     - 方向更新在 SO(2) 流形上进行，保证旋转矩阵的正交性
%
% 注意：
%   这是 EKF/UKF/InEKF 等滤波器中用于预测的核心动力学函数。
%   它必须与实际系统一致，否则会导致滤波器发散。

%% 更新方向（航向角）—— 在 SO(2) 流形上进行
% 当前方向 state.Rot 左乘一个由角速度驱动的小旋转
%
% (omega.gyro + w(3)) 是带噪声的角速度输入
% (omega.gyro + w(3))*dt 是该时间步内的累积旋转角度（弧度）
%
% so2_exp(theta) 返回一个 2x2 旋转矩阵：exp(theta * J)，其中 J=[0 -1; 1 0]
% 即：exp_map(θ) = [cosθ -sinθ; sinθ cosθ]
%
% 更新公式：
%   R_{k+1} = R_k * exp((ω + w_ω) * dt)
% 表示：当前姿态下，绕瞬时旋转中心转过一个小角度
new_state.Rot = state.Rot * so2_exp((omega.gyro + w(3)) * dt);

%% 更新位置（在世界坐标系中积分）
% 位置更新基于当前方向和带噪声的速度输入：
%
% (omega.v + w(1:2)) 是带噪声的速度向量：
%   - omega.v 是前向速度（标量）
%   - w(1) 是纵向噪声（沿车身 x 轴）
%   - w(2) 是横向噪声（沿车身 y 轴，模拟侧滑）
%
% 注意：这里假设速度是沿车身 x 轴输入的，因此需要通过当前旋转矩阵 R_k
%       将其从**机体坐标系**变换到**世界坐标系**
%
% 更新公式：
%   p_{k+1} = p_k + R_k * [v + w_v; w_lat] * dt
%
% 物理意义：
%   - 机器人根据当前朝向“向前走”了一段距离
%   - 横向噪声 w(2) 模拟轮胎打滑或地面不平造成的侧移
new_state.p = state.p + state.Rot * (omega.v + w(1:2)) * dt;

% 函数结束
end